"""
P√°gina de revis√£o e sele√ß√£o interativa de livros Kindle.

Permite ao usu√°rio filtrar, selecionar e exportar interativamente
livros da biblioteca Kindle Cloud Reader.
"""

import logging
import os
import json
import csv
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any, List, Optional, Tuple
from tempfile import gettempdir

import pandas as pd
import streamlit as st

from core.services.library_service import LibraryService
from core.services.kindle_export_history_service import KindleExportHistoryService

logger = logging.getLogger(__name__)


def render_kindle_review_page(library_service: LibraryService, temp_csv_path: str) -> None:
    """
    Renderiza p√°gina de revis√£o e sele√ß√£o de livros Kindle.

    Args:
        library_service: Servi√ßo de biblioteca
        temp_csv_path: Caminho para arquivo CSV tempor√°rio gerado pelo scanner
    """
    st.markdown('<div class="main-header">üìö Revis√£o e Sele√ß√£o - Kindle Cloud Reader</div>', unsafe_allow_html=True)

    # Validar arquivo tempor√°rio
    if not os.path.exists(temp_csv_path):
        st.error("‚ùå Arquivo tempor√°rio n√£o encontrado. Escaneie novamente.")
        if st.button("Voltar ao Escanear"):
            st.session_state.page = 'scan'
            st.rerun()
        return

    try:
        # Carregar dados do CSV
        df = pd.read_csv(temp_csv_path)
        logger.info(f"Carregados {len(df)} livros do CSV tempor√°rio")

        # Inicializar estado da sess√£o
        if 'kindle_selection_state' not in st.session_state:
            st.session_state.kindle_selection_state = {
                'selected': [False] * len(df),
                'filtered_indices': list(range(len(df))),
                'period_filter': 'Todos',
                'date_from': None,
                'date_to': None,
                'author_filter': [],
                'origin_type_filter': ['PURCHASE'],
                'read_status_filter': [0, 1, 2]  # 0: n√£o lido, 1: em andamento, 2: conclu√≠do
            }

        # Layout com sidebar para filtros
        with st.sidebar:
            st.markdown("### üîç Filtros")

            # Filtro de Per√≠odo
            period_options = ['Todos', '√öltima semana', '√öltimo m√™s', '√öltimos 3 meses', '√öltimo ano', 'Personalizado']
            period = st.selectbox(
                "Per√≠odo de Aquisi√ß√£o",
                period_options,
                index=period_options.index(st.session_state.kindle_selection_state['period_filter'])
            )
            st.session_state.kindle_selection_state['period_filter'] = period

            date_from = None
            date_to = None

            if period == 'Personalizado':
                col1, col2 = st.columns(2)
                with col1:
                    date_from = st.date_input("De", key='kindle_date_from')
                with col2:
                    date_to = st.date_input("At√©", key='kindle_date_to')
                st.session_state.kindle_selection_state['date_from'] = date_from
                st.session_state.kindle_selection_state['date_to'] = date_to

            # Filtro de Autor
            unique_authors = sorted(df['Autor'].unique().tolist())
            selected_authors = st.multiselect(
                "Autores",
                unique_authors,
                default=st.session_state.kindle_selection_state['author_filter'],
                key='kindle_authors'
            )
            st.session_state.kindle_selection_state['author_filter'] = selected_authors

            # Filtro de Tipo de Origem
            origin_types = ['PURCHASE', 'FREE', 'PRIME_READING', 'UNLIMITED']
            selected_origins = st.multiselect(
                "Tipo de Origem",
                origin_types,
                default=['PURCHASE'],
                key='kindle_origins'
            )
            st.session_state.kindle_selection_state['origin_type_filter'] = selected_origins

            # Filtro de Status de Leitura
            st.markdown("#### Status de Leitura")
            col1, col2, col3 = st.columns(3)
            with col1:
                not_read = st.checkbox("N√£o lidos", value=True, key='kindle_not_read')
            with col2:
                in_progress = st.checkbox("Em andamento", value=True, key='kindle_in_progress')
            with col3:
                completed = st.checkbox("Conclu√≠dos", value=True, key='kindle_completed')

            read_status = []
            if not_read:
                read_status.append(0)
            if in_progress:
                read_status.append(1)
            if completed:
                read_status.append(2)
            st.session_state.kindle_selection_state['read_status_filter'] = read_status

            # Bot√µes de sele√ß√£o em massa
            st.markdown("### ‚öôÔ∏è Controles de Sele√ß√£o")
            col1, col2, col3 = st.columns(3)

            with col1:
                if st.button("‚úÖ Todos", use_container_width=True):
                    st.session_state.kindle_selection_state['selected'] = [True] * len(df)
                    st.rerun()

            with col2:
                if st.button("‚ùå Nenhum", use_container_width=True):
                    st.session_state.kindle_selection_state['selected'] = [False] * len(df)
                    st.rerun()

            with col3:
                if st.button("üîÑ Inverter", use_container_width=True):
                    selected = st.session_state.kindle_selection_state['selected']
                    st.session_state.kindle_selection_state['selected'] = [not s for s in selected]
                    st.rerun()

        # Aplicar filtros
        filtered_df, filtered_indices = _apply_filters(df, st.session_state.kindle_selection_state)
        st.session_state.kindle_selection_state['filtered_indices'] = filtered_indices

        # M√©tricas no topo
        col1, col2, col3, col4 = st.columns(4)

        with col1:
            st.metric("Total de Livros", len(df))

        with col2:
            st.metric("Ap√≥s Filtros", len(filtered_df))

        selected_count = sum(
            st.session_state.kindle_selection_state['selected'][i]
            for i in filtered_indices
        )

        with col3:
            st.metric("Selecionados", selected_count)

        with col4:
            if len(filtered_df) > 0:
                percentage = (selected_count / len(filtered_df)) * 100
                st.metric("Percentual", f"{percentage:.1f}%")
            else:
                st.metric("Percentual", "0%")

        # Tabela de sele√ß√£o
        st.markdown("### üìñ Livros")

        # Preparar dados para exibi√ß√£o
        display_data = []
        for idx, orig_idx in enumerate(filtered_indices):
            row = filtered_df.iloc[idx]
            display_data.append({
                'Exportar': st.session_state.kindle_selection_state['selected'][orig_idx],
                'Capa': row['URL_Capa'] if pd.notna(row['URL_Capa']) else '',
                'T√≠tulo': row['Nome'],
                'Autor': row['Autor'],
                'Adquirido em': row['Data Modifica√ß√£o'],
                'Tipo': row['Tipo_Origem'],
                'Progresso': row['Percentual_Lido'],
                'Status': _get_book_status_emoji(row['ASIN']),
                'ASIN': row['ASIN']
            })

        display_df = pd.DataFrame(display_data)

        # Usar data_editor para sele√ß√£o interativa
        edited_df = st.data_editor(
            display_df,
            use_container_width=True,
            disabled=['Capa', 'T√≠tulo', 'Autor', 'Adquirido em', 'Tipo', 'Progresso', 'Status', 'ASIN'],
            hide_index=True,
            key='kindle_editor'
        )

        # Atualizar estado de sele√ß√£o
        for idx, orig_idx in enumerate(filtered_indices):
            st.session_state.kindle_selection_state['selected'][orig_idx] = edited_df.iloc[idx]['Exportar']

        # Preview de selecionados
        if selected_count > 0:
            with st.expander(f"üëÅÔ∏è Preview dos {selected_count} Livros Selecionados"):
                preview_data = []
                for orig_idx, selected in enumerate(st.session_state.kindle_selection_state['selected']):
                    if selected:
                        preview_data.append(df.iloc[orig_idx])

                if preview_data:
                    preview_df = pd.DataFrame(preview_data)
                    cols_per_row = 5
                    for i in range(0, len(preview_df), cols_per_row):
                        cols = st.columns(cols_per_row)
                        for j, col in enumerate(cols):
                            if i + j < len(preview_df):
                                row = preview_df.iloc[i + j]
                                with col:
                                    if pd.notna(row['URL_Capa']) and row['URL_Capa']:
                                        st.image(row['URL_Capa'], use_container_width=True)
                                    else:
                                        st.write("üìï")
                                    st.caption(f"{row['Nome'][:30]}...")
                                    st.caption(row['Data Modifica√ß√£o'])

        # Bot√£o de exporta√ß√£o
        st.markdown("---")
        col1, col2 = st.columns([1, 1])

        with col1:
            if st.button("üëà Voltar", use_container_width=True):
                # Limpar arquivo tempor√°rio
                try:
                    os.remove(temp_csv_path)
                    logger.info(f"Arquivo tempor√°rio removido: {temp_csv_path}")
                except Exception as e:
                    logger.warning(f"Erro ao remover arquivo tempor√°rio: {str(e)}")

                st.session_state.page = 'scan'
                st.rerun()

        with col2:
            if st.button(
                "üì§ Exportar Selecionados",
                disabled=(selected_count == 0),
                use_container_width=True,
                type='primary'
            ):
                # Exportar livros selecionados
                success = _export_selected_books(
                    df,
                    st.session_state.kindle_selection_state['selected'],
                    library_service,
                    temp_csv_path
                )

                if success:
                    st.success(f"‚úÖ {selected_count} livros exportados com sucesso!")
                    st.balloons()

                    # Atualizar hist√≥rico
                    _update_export_history(
                        df,
                        st.session_state.kindle_selection_state['selected']
                    )

                    # Redirecionar para p√°gina de visualiza√ß√£o
                    st.session_state.page = 'view'
                    st.rerun()
                else:
                    st.error("‚ùå Erro ao exportar livros. Verifique o log.")

    except Exception as e:
        logger.error(f"Erro ao renderizar p√°gina Kindle: {str(e)}", exc_info=True)
        st.error(f"‚ùå Erro ao processar livros: {str(e)}")
        if st.button("Voltar"):
            st.session_state.page = 'scan'
            st.rerun()


def _apply_filters(df: pd.DataFrame, state: Dict[str, Any]) -> Tuple[pd.DataFrame, List[int]]:
    """
    Aplica filtros aos dados.

    Args:
        df: DataFrame com livros
        state: Estado contendo filtros

    Returns:
        Tupla (DataFrame filtrado, Lista de √≠ndices originais)
    """
    filtered_df = df.copy()
    indices = list(range(len(df)))

    # Filtro de per√≠odo
    if state['period_filter'] != 'Todos':
        filtered_df, indices = _apply_period_filter(
            filtered_df,
            indices,
            state['period_filter'],
            state.get('date_from'),
            state.get('date_to')
        )

    # Filtro de autores
    if state['author_filter']:
        mask = filtered_df['Autor'].isin(state['author_filter'])
        filtered_df = filtered_df[mask]
        indices = [i for i, m in zip(indices, mask) if m]

    # Filtro de tipo de origem
    if state['origin_type_filter']:
        mask = filtered_df['Tipo_Origem'].isin(state['origin_type_filter'])
        filtered_df = filtered_df[mask]
        indices = [i for i, m in zip(indices, mask) if m]

    # Filtro de status de leitura
    read_status_filter = state['read_status_filter']
    mask = filtered_df['Percentual_Lido'].apply(
        lambda x: _get_read_status(x) in read_status_filter
    )
    filtered_df = filtered_df[mask]
    indices = [i for i, m in zip(indices, mask) if m]

    # Ordenar por data (mais recentes primeiro)
    sort_indices = sorted(range(len(filtered_df)), key=lambda i: filtered_df.iloc[i]['Data Modifica√ß√£o'], reverse=True)
    filtered_df = filtered_df.iloc[sort_indices]
    indices = [indices[i] for i in sort_indices]

    return filtered_df.reset_index(drop=True), indices


def _apply_period_filter(
    df: pd.DataFrame,
    indices: List[int],
    period: str,
    date_from: Optional[Any] = None,
    date_to: Optional[Any] = None
) -> Tuple[pd.DataFrame, List[int]]:
    """Aplica filtro de per√≠odo."""
    now = datetime.now()

    if period == '√öltima semana':
        cutoff = now - timedelta(days=7)
    elif period == '√öltimo m√™s':
        cutoff = now - timedelta(days=30)
    elif period == '√öltimos 3 meses':
        cutoff = now - timedelta(days=90)
    elif period == '√öltimo ano':
        cutoff = now - timedelta(days=365)
    elif period == 'Personalizado' and date_from and date_to:
        # Filtro personalizado
        mask = (pd.to_datetime(df['Data Modifica√ß√£o']) >= pd.Timestamp(date_from)) & \
               (pd.to_datetime(df['Data Modifica√ß√£o']) <= pd.Timestamp(date_to))
        filtered_df = df[mask]
        filtered_indices = [i for i, m in zip(indices, mask) if m]
        return filtered_df, filtered_indices
    else:
        return df, indices

    # Aplicar filtro de data
    mask = pd.to_datetime(df['Data Modifica√ß√£o']) >= cutoff
    filtered_df = df[mask]
    filtered_indices = [i for i, m in zip(indices, mask) if m]
    return filtered_df, filtered_indices


def _get_read_status(percentage: int) -> int:
    """
    Obt√©m status de leitura (0=n√£o lido, 1=em andamento, 2=conclu√≠do).

    Args:
        percentage: Percentual lido (0-100)

    Returns:
        Status (0, 1 ou 2)
    """
    if percentage == 0:
        return 0
    elif percentage >= 100:
        return 2
    else:
        return 1


def _get_book_status_emoji(asin: str) -> str:
    """
    Obt√©m emoji de status do livro (novo ou j√° exportado).

    Args:
        asin: ASIN do livro

    Returns:
        Emoji de status
    """
    history_service = KindleExportHistoryService()
    if history_service.is_exported(asin):
        export_date = history_service.get_export_date(asin)
        if export_date:
            return f"‚úÖ Exportado em {export_date[:10]}"
        return "‚úÖ Exportado"
    return "üÜï Novo"


def _update_export_history(df: pd.DataFrame, selected: List[bool]) -> None:
    """
    Atualiza hist√≥rico de exporta√ß√µes.

    Args:
        df: DataFrame com livros
        selected: Lista de booleanos indicando sele√ß√£o
    """
    try:
        history_service = KindleExportHistoryService()
        asins_to_add = []

        for idx, is_selected in enumerate(selected):
            if is_selected:
                asin = df.iloc[idx].get('ASIN')
                if asin:
                    asins_to_add.append(asin)

        if asins_to_add:
            success = history_service.add_to_history(asins_to_add)
            if success:
                logger.info(f"Hist√≥rico atualizado com {len(asins_to_add)} ASINs")
            else:
                logger.warning("Erro ao atualizar hist√≥rico")

    except Exception as e:
        logger.error(f"Erro ao atualizar hist√≥rico de exporta√ß√£o: {str(e)}")


def _export_selected_books(
    df: pd.DataFrame,
    selected: List[bool],
    library_service: LibraryService,
    temp_csv_path: str
) -> bool:
    """
    Exporta livros selecionados.

    Args:
        df: DataFrame com todos os livros
        selected: Lista de booleanos indicando sele√ß√£o
        library_service: Servi√ßo de biblioteca
        temp_csv_path: Caminho do CSV tempor√°rio

    Returns:
        True se sucesso, False caso contr√°rio
    """
    try:
        # Filtrar apenas selecionados
        selected_indices = [i for i, s in enumerate(selected) if s]
        selected_df = df.iloc[selected_indices].copy()

        if len(selected_df) == 0:
            logger.warning("Nenhum livro selecionado para exporta√ß√£o")
            return False

        # Converter para formato padr√£o do eBook Manager
        export_df = pd.DataFrame({
            'Nome': selected_df['Nome'],
            'Autor': selected_df['Autor'],
            'Formato': selected_df['Formato'],
            'Tamanho(MB)': selected_df['Tamanho(MB)'],
            'Data Modifica√ß√£o': selected_df['Data Modifica√ß√£o'],
            'Caminho': selected_df['Caminho'],
            'ASIN': selected_df['ASIN'],
            'Origem': selected_df['Origem'],
            'Tipo_Origem': selected_df['Tipo_Origem'],
            'Percentual_Lido': selected_df['Percentual_Lido'],
            'URL_Capa': selected_df['URL_Capa']
        })

        # Salvar CSV final
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        final_csv_path = os.path.join(gettempdir(), f"ebooks_kindle_selected_{timestamp}.csv")

        export_df.to_csv(final_csv_path, index=False, encoding='utf-8')
        logger.info(f"CSV de exporta√ß√£o salvo em: {final_csv_path}")

        # Armazenar caminho no estado da sess√£o para importa√ß√£o futura
        st.session_state.last_import_file = final_csv_path

        # Remover arquivo tempor√°rio
        try:
            os.remove(temp_csv_path)
            logger.info(f"Arquivo tempor√°rio removido: {temp_csv_path}")
        except Exception as e:
            logger.warning(f"Erro ao remover arquivo tempor√°rio: {str(e)}")

        return True

    except Exception as e:
        logger.error(f"Erro ao exportar livros selecionados: {str(e)}", exc_info=True)
        return False
